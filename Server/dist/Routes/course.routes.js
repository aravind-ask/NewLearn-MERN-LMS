"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// src/routes/course.router.ts
const express_1 = __importDefault(require("express"));
const course_repository_1 = require("../repositories/course.repository");
const course_service_1 = require("../services/course.service");
const course_controller_1 = require("../Controllers/course.controller");
const auth_middleware_1 = require("../middlewares/auth.middleware");
const authorizeRoles_1 = require("../middlewares/authorizeRoles");
const enrollment_service_1 = __importDefault(require("../services/enrollment.service"));
const enrollment_repository_1 = require("../repositories/enrollment.repository");
const offer_service_1 = require("../services/offer.service");
const offer_repository_1 = require("../repositories/offer.repository");
const courseRepository = new course_repository_1.CourseRepository();
const offerService = new offer_service_1.OfferService(new offer_repository_1.OfferRepository());
const courseService = new course_service_1.CourseService(new course_repository_1.CourseRepository(), offerService);
const enrollmentRepository = new enrollment_repository_1.EnrollmentRepository();
const enrollmentService = new enrollment_service_1.default(enrollmentRepository);
const courseController = new course_controller_1.CourseController(courseService, enrollmentService);
const router = express_1.default.Router();
router.get("/", courseController.getAllCourses.bind(courseController));
router.get("/:courseId", courseController.getCourseDetails.bind(courseController));
router.get("/enrolled/:courseId", auth_middleware_1.authMiddleware.verifyAccessToken, courseController.checkCourseEnrollmentInfo.bind(courseController));
router.post("/", auth_middleware_1.authMiddleware.verifyAccessToken, (0, authorizeRoles_1.authorizeRoles)(["instructor"]), courseController.createCourse.bind(courseController));
router.put("/", auth_middleware_1.authMiddleware.verifyAccessToken, (0, authorizeRoles_1.authorizeRoles)(["instructor"]), courseController.editCourse.bind(courseController));
router.delete("/:courseId", auth_middleware_1.authMiddleware.verifyAccessToken, (0, authorizeRoles_1.authorizeRoles)(["instructor", "admin"]), courseController.deleteCourse.bind(courseController));
exports.default = router;
